// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @db.VarChar(255)
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  wallets  Wallet[]
  accounts Account[]
  sessions Session[]
  expenses Expense[]

  @@map("users")
}

model Account {
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Wallet {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @db.VarChar(255)
  ownerId   String    @map("owner_id") @db.Uuid
  currency  String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  owner   User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  history WalletHistory[]

  @@map("wallets")
}

model WalletHistory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  walletId    String    @map("wallet_id") @db.Uuid
  moneyAmount Float     @map("money_amount")
  date        DateTime  @default(now()) @db.Timestamp(6)
  comment     String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(6)

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallets_history")
}

model Expense {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime  @default(now()) @db.Timestamp(6)
  moneyAmount Float     @map("money_amount")
  currency    String    @db.VarChar(255)
  type        String    @db.VarChar(255)
  comment     String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(6)

  ownerId String @map("owner_id") @db.Uuid
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("expenses")
}
