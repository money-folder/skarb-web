name: Bundlewatch

on:
  pull_request:
    branches:
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  bundlewatch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run bundlewatch and capture output
        id: bundlewatch
        run: |
          # Run bundlewatch and capture output, always return true to prevent workflow failure
          OUTPUT=$(npm run bundlewatch || true)

          # Format the output by replacing specific patterns
          OUTPUT=$(echo "$OUTPUT" | sed 's/%0A/\n/g' | # Replace %0A with actual newlines
                                  sed 's/\[INFO\]/### ‚ÑπÔ∏è /g' | # Format INFO messages
                                  sed 's/PASS/‚úÖ PASS/g' | # Add emoji to PASS
                                  sed 's/FAIL/‚ùå FAIL/g' | # Add emoji to FAIL
                                  sed 's/Result breakdown at:/üìä Result breakdown at:/')

          # Escape newlines and special characters for GitHub Actions
          OUTPUT="${OUTPUT//'%'/'%25'}"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"

          # Set output variable
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}
          CI_REPO_OWNER: money-folder
          CI_REPO_NAME: skarb-web
          CI_COMMIT_SHA: ${{ github.sha }}

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const bundlewatchOutput = process.env.BUNDLEWATCH_OUTPUT;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.body.includes('### üì¶ Bundlewatch Results')
            );

            const commentBody = `### üì¶ Bundlewatch Results\n${bundlewatchOutput.split('%0A').join('\n')}`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
        env:
          BUNDLEWATCH_OUTPUT: ${{ steps.bundlewatch.outputs.result }}
